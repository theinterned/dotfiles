{
  "version": 3,
  "sources": ["../src/configureMenubarPresets.tsx", "../src/hooks/useTimers.ts", "../src/timerUtils.ts", "../src/formatUtils.ts", "../src/hooks/useDefaultPresetVisibles.ts"],
  "sourcesContent": ["import useTimers from \"./hooks/useTimers\";\nimport { Action, ActionPanel, Color, Icon, List } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useDefaultPresetVisibles from \"./hooks/useDefaultPresetVisibles\";\nimport { formatTime } from \"./formatUtils\";\n\nexport default function Command() {\n  const { customTimers, isLoading, refreshTimers, handleToggleCTVisibility } = useTimers();\n  const { defaultPresets, defaultVisibles, isLoadingVisibles, refreshDefaultVisibles, handleDefaultPresetToggle } =\n    useDefaultPresetVisibles();\n  const hiddenTag = { tag: { value: \"Hidden\", color: Color.Red } };\n  const visibleTag = { tag: { value: \"Visible\", color: Color.Green } };\n\n  useEffect(() => {\n    refreshTimers();\n    refreshDefaultVisibles();\n  }, []);\n\n  return (\n    <List isLoading={isLoading && isLoadingVisibles}>\n      <List.Section title={\"Custom Presets\"}>\n        {Object.keys(customTimers)\n          .sort((a, b) => {\n            return customTimers[a].timeInSeconds - customTimers[b].timeInSeconds;\n          })\n          .map((ctID) => (\n            <List.Item\n              key={ctID}\n              title={customTimers[ctID].name}\n              subtitle={formatTime(customTimers[ctID].timeInSeconds)}\n              icon={Icon.Clock}\n              accessories={[customTimers[ctID].showInMenuBar ? visibleTag : hiddenTag]}\n              actions={\n                <ActionPanel>\n                  <Action\n                    title={customTimers[ctID].showInMenuBar ? \"Hide In Menu Bar\" : \"Show In Menu Bar\"}\n                    onAction={() => handleToggleCTVisibility(ctID)}\n                  />\n                </ActionPanel>\n              }\n            />\n          ))}\n      </List.Section>\n      <List.Section title={\"Default Presets\"}>\n        {defaultPresets.map((defaultPreset) => (\n          <List.Item\n            key={defaultPreset.key}\n            title={defaultPreset.title}\n            icon={Icon.Hourglass}\n            accessories={[defaultVisibles?.[defaultPreset.key] ? visibleTag : hiddenTag]}\n            actions={\n              <ActionPanel>\n                <Action\n                  title={defaultVisibles?.[defaultPreset.key] ? \"Hide In Menu Bar\" : \"Show In Menu Bar\"}\n                  onAction={() => handleDefaultPresetToggle(defaultPreset.key)}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List.Section>\n    </List>\n  );\n}\n", "import { useState } from \"react\";\nimport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  startTimer,\n  stopTimer,\n  toggleCustomTimerMenubarVisibility,\n} from \"../timerUtils\";\nimport { CustomTimer, Timer } from \"../types\";\nimport { Alert, Icon, confirmAlert } from \"@raycast/api\";\n\nexport default function useTimers() {\n  const [timers, setTimers] = useState<Timer[] | undefined>(undefined);\n  const [customTimers, setCustomTimers] = useState<Record<string, CustomTimer>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(timers === undefined);\n\n  const refreshTimers = () => {\n    ensureCTFileExists();\n    const setOfTimers: Timer[] = getTimers();\n    setTimers(setOfTimers);\n    const setOfCustomTimers: Record<string, CustomTimer> = readCustomTimers();\n    setCustomTimers(setOfCustomTimers);\n    setIsLoading(false);\n  };\n\n  const handleStartTimer = (seconds: number, name: string, launchedFromMenuBar = false) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer(seconds, name);\n    refreshTimers();\n  };\n\n  const handleStopTimer = (timer: Timer) => {\n    setTimers(timers?.filter((t: Timer) => t.originalFile !== timer.originalFile));\n    stopTimer(timer.originalFile);\n    refreshTimers();\n  };\n\n  const handleStartCT = (customTimer: CustomTimer, launchedFromMenuBar = false) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer(customTimer.timeInSeconds, customTimer.name, customTimer.selectedSound);\n    refreshTimers();\n  };\n\n  const handleCreateCT = (timer: Timer) => {\n    // TODO: make it possible to provide selected sound into CustomTimer\n    const customTimer: CustomTimer = {\n      name: timer.name,\n      timeInSeconds: timer.secondsSet,\n      selectedSound: \"default\",\n      showInMenuBar: true,\n    };\n    createCustomTimer(customTimer);\n    refreshTimers();\n  };\n\n  const handleDeleteCT = async (ctID: string) => {\n    const options: Alert.Options = {\n      title: \"Delete this preset?\",\n      icon: Icon.Trash,\n      message: \"You won't be able to recover it.\",\n      dismissAction: { title: \"Cancel\", style: Alert.ActionStyle.Cancel },\n      primaryAction: { title: \"Delete\", style: Alert.ActionStyle.Destructive },\n    };\n    if (await confirmAlert(options)) {\n      deleteCustomTimer(ctID);\n      refreshTimers();\n    }\n  };\n\n  const handleToggleCTVisibility = async (ctID: string) => {\n    toggleCustomTimerMenubarVisibility(ctID);\n    refreshTimers();\n  };\n\n  return {\n    timers,\n    customTimers,\n    isLoading,\n    refreshTimers,\n    handleStartTimer,\n    handleStopTimer,\n    handleStartCT,\n    handleCreateCT,\n    handleDeleteCT,\n    handleToggleCTVisibility,\n  };\n}\n", "import { environment, getPreferenceValues, popToRoot, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, unlinkSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\nconst DEFAULT_PRESET_VISIBLES_FILE = environment.supportPath + \"/defaultPresetVisibles.json\";\n\nconst silentFileDeletion = (fp: string) => {\n  try {\n    unlinkSync(fp);\n  } catch (err) {\n    // only throw if it's not a \"file doesn't exist\" error\n    if (err instanceof Error && !err.message.includes(\"ENOENT\")) throw err;\n  }\n};\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"\u26A0\uFE0F Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    if (launchedFromMenuBar) {\n      showHUD(errorMsg);\n    } else {\n      showToast({ style: Toast.Style.Failure, title: errorMsg });\n    }\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer(timeInSeconds: number, timerName = \"Untitled\", selectedSound = \"default\") {\n  popToRoot();\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`,\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  await showHUD(`Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}! \uD83C\uDF89`);\n}\n\nfunction stopTimer(timerFile: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const dismissFile = timerFilePath.replace(\".timer\", \".dismiss\");\n  silentFileDeletion(timerFilePath);\n  silentFileDeletion(dismissFile);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  const res: Record<string, CustomTimer> = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  return Object.fromEntries(\n    Object.entries(res).map(([ctID, timer]) =>\n      timer.showInMenuBar === undefined ? [ctID, { ...timer, showInMenuBar: true }] : [ctID, timer],\n    ),\n  );\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction toggleCustomTimerMenubarVisibility(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  const currentVisibility = customTimers[ctID].showInMenuBar;\n  customTimers[ctID].showInMenuBar = currentVisibility === undefined ? false : !currentVisibility;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nconst readDefaultPresetVisibles = (): Record<string, boolean> => {\n  if (!existsSync(DEFAULT_PRESET_VISIBLES_FILE)) {\n    const defaultPresetVisibles = {\n      \"2M\": true,\n      \"5M\": true,\n      \"10M\": true,\n      \"15M\": true,\n      \"30M\": true,\n      \"45M\": true,\n      \"60M\": true,\n      \"90M\": true,\n    };\n    writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(defaultPresetVisibles));\n    return defaultPresetVisibles;\n  }\n  const res: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  return res;\n};\n\nconst toggleDefaultPresetVisibility = (key: string) => {\n  const data: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  data[key] = !data[key];\n  writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(data));\n};\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  toggleCustomTimerMenubarVisibility,\n  startTimer,\n  stopTimer,\n  readDefaultPresetVisibles,\n  toggleDefaultPresetVisibility,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours === 0 ? \"\" : hours + \":\"}${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\"),\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime(),\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { useState } from \"react\";\nimport { DefaultTimerPreset } from \"../types\";\nimport { readDefaultPresetVisibles, toggleDefaultPresetVisibility } from \"../timerUtils\";\n\nexport default function useDefaultPresetVisibles() {\n  const defaultPresets: DefaultTimerPreset[] = [\n    {\n      key: \"2M\",\n      title: \"2 Minute Timer\",\n      seconds: 60 * 2,\n    },\n    {\n      key: \"5M\",\n      title: \"5 Minute Timer\",\n      seconds: 60 * 5,\n    },\n    {\n      key: \"10M\",\n      title: \"10 Minute Timer\",\n      seconds: 60 * 10,\n    },\n    {\n      key: \"15M\",\n      title: \"15 Minute Timer\",\n      seconds: 60 * 15,\n    },\n    {\n      key: \"30M\",\n      title: \"30 Minute Timer\",\n      seconds: 60 * 30,\n    },\n    {\n      key: \"45M\",\n      title: \"45 Minute Timer\",\n      seconds: 60 * 45,\n    },\n    {\n      key: \"60M\",\n      title: \"60 Minute Timer\",\n      seconds: 60 * 60,\n    },\n    {\n      key: \"90M\",\n      title: \"90 Minute Timer\",\n      seconds: 60 * 60 * 1.5,\n    },\n  ];\n\n  const [defaultVisibles, setDefaultVisibles] = useState<Record<string, boolean> | undefined>();\n  const [isLoadingVisibles, setIsLoadingVisibles] = useState<boolean>(defaultVisibles === undefined);\n\n  const refreshDefaultVisibles = () => {\n    setDefaultVisibles(readDefaultPresetVisibles());\n    setIsLoadingVisibles(false);\n  };\n\n  const handleDefaultPresetToggle = (key: string) => {\n    toggleDefaultPresetVisibility(key);\n    refreshDefaultVisibles();\n  };\n\n  return {\n    defaultPresets,\n    defaultVisibles,\n    isLoadingVisibles,\n    refreshDefaultVisibles,\n    handleDefaultPresetToggle,\n  };\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAyB,iBCAzB,IAAAC,EAAuF,wBACvFC,EAAqB,yBACrBC,EAA2B,kBAC3BC,EAAiF,cACjFC,EAAwB,gBCJxB,IAAMC,EAAcC,GAAoB,CACtC,IAAMC,EAAQ,KAAK,MAAMD,EAAU,IAAI,EACjCE,EAAO,OAAO,KAAK,MAAOF,EAAU,KAAQ,EAAE,CAAC,EAAE,SAAS,EAAG,GAAG,EAChEG,EAAO,OAAO,KAAK,MAAMH,EAAU,EAAE,CAAC,EAAE,SAAS,EAAG,GAAG,EAC7D,MAAO,GAAGC,IAAU,EAAI,GAAKA,EAAQ,MAAMC,KAAQC,GACrD,EAiBA,IAAMC,EAAuBC,IAC3BA,EAAK,GAAKA,EAAK,IAAM,OAAS,OAAYA,EAAK,GAC/CA,EAAK,GAAKA,EAAK,IAAM,OAAS,OAAYA,EAAK,GAE7C,KAAK,OACFA,EAAK,GAAK,IAAI,KAAKA,EAAK,EAAE,EAAI,IAAI,MAAQ,QAAQ,GAAKA,EAAK,GAAK,IAAI,KAAKA,EAAK,EAAE,EAAI,IAAI,MAAQ,QAAQ,CAC5G,EAAI,KDpBR,IAAMC,EAAW,cAAY,YAAc,qBACrCC,EAA+B,cAAY,YAAc,8BAEzDC,EAAsBC,GAAe,CACzC,GAAI,IACF,cAAWA,CAAE,CACf,OAASC,EAAP,CAEA,GAAIA,aAAe,OAAS,CAACA,EAAI,QAAQ,SAAS,QAAQ,EAAG,MAAMA,CACrE,CACF,EAEMC,EAA0B,CAACC,EAAsB,KAAU,CAC/D,IAAMC,KAAQ,uBAAiC,EAC/C,GAAI,WAAWA,EAAM,aAAa,EAAI,EAAK,CACzC,IAAMC,EAAW,uFACjB,OAAIF,KACF,WAAQE,CAAQ,KAEhB,aAAU,CAAE,MAAO,QAAM,MAAM,QAAS,MAAOA,CAAS,CAAC,EAEpD,GAET,MAAO,EACT,EAEA,eAAeC,EAAWC,EAAuBC,EAAY,WAAYC,EAAgB,UAAW,IAClG,aAAU,EAEV,IAAMC,GADW,cAAY,YAAc,IAAM,IAAI,KAAK,EAAE,YAAY,EAAI,MAAQH,EAAgB,UACxE,QAAQ,KAAM,IAAI,KAC9C,iBAAcG,EAAYF,CAAS,EAEnC,IAAMJ,KAAQ,uBAAiC,EACzCO,EAAoB,GACxB,cAAY,WAAa,KAAOF,IAAkB,UAAYL,EAAM,cAAgBK,KAEhFG,EAAW,CAAC,SAASL,GAAe,EAC1CK,EAAS,KACP,YAAYF,2DAAoEF,oCAClF,EACA,IAAMK,EAAe,WAAWF,eAA+BP,EAAM,cAAc,QAAQ,IAAK,GAAG,IAMnG,GALIA,EAAM,gBAAkB,mBAC1BQ,EAAS,KAAK,QAAQJ,IAAY,EAElCI,EAAS,KAAKC,CAAY,EAExBT,EAAM,iBAAkB,CAC1B,IAAMU,EAAc,GAAGJ,IAAa,QAAQ,SAAU,UAAU,KAChE,iBAAcI,EAAa,0BAA0B,EACrDF,EAAS,KAAK,eAAeE,YAAsBD,SAAoB,EAEzED,EAAS,KAAK,OAAOF,mCAA4C,KACjE,QAAKE,EAAS,KAAK,MAAM,EAAG,CAACG,EAAOC,IAAW,CAC7C,GAAID,EAAO,CACT,QAAQ,IAAI,UAAUA,EAAM,SAAS,EACrC,OAEF,GAAIC,EAAQ,CACV,QAAQ,IAAI,WAAWA,GAAQ,EAC/B,OAEJ,CAAC,EACD,QAAM,WAAQ,UAAUR,kBAA0BS,EAAWV,CAAa,cAAO,CACnF,CAEA,SAASW,EAAUC,EAAmB,CACpC,IAAMC,EAAgB,cAAY,YAAc,IAAMD,EAChDL,EAAcM,EAAc,QAAQ,SAAU,UAAU,EAC9DrB,EAAmBqB,CAAa,EAChCrB,EAAmBe,CAAW,CAChC,CAEA,SAASO,GAAY,CACnB,IAAMC,EAAuB,CAAC,EAE9B,SADc,eAAY,cAAY,WAAW,EAC3C,QAASH,GAAsB,CACnC,MAAI,WAAQA,CAAS,GAAK,SAAU,CAClC,IAAMI,EAAe,CACnB,KAAM,GACN,WAAY,IACZ,SAAU,IACV,aAAcJ,EACd,SAAU,IAAI,IAChB,EACAI,EAAM,QAAO,gBAAa,cAAY,YAAc,IAAMJ,CAAS,EAAE,SAAS,EAC9E,IAAMK,EAAiBL,EAAU,MAAM,KAAK,EAC5CI,EAAM,WAAa,OAAOC,EAAe,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EACzD,IAAMC,EAAcD,EAAe,CAAC,EAAE,QAAQ,MAAO,GAAG,EACxDD,EAAM,SAAW,KAAK,IAAI,EAAG,KAAK,MAAMA,EAAM,WAAaG,EAAoB,CAAE,GAAID,CAAY,CAAC,CAAC,CAAC,EACpGF,EAAM,SAAW,IAAI,KAAKE,CAAW,EACrCF,EAAM,SAAS,WAAWA,EAAM,SAAS,WAAW,EAAIA,EAAM,UAAU,EACxED,EAAY,KAAKC,CAAK,EAE1B,CAAC,EACDD,EAAY,KAAK,CAACK,EAAGC,IACZD,EAAE,SAAWC,EAAE,QACvB,EACMN,CACT,CAOA,SAASO,GAAqB,IACvB,cAAWC,CAAQ,MACtB,iBAAcA,EAAU,KAAK,UAAU,CAAC,CAAC,CAAC,CAE9C,CAEA,SAASC,EAAkBC,EAAuB,CAChDH,EAAmB,EACnB,IAAMI,EAAe,KAAK,SAAM,gBAAaH,EAAU,MAAM,CAAC,EAC9DG,KAAa,cAAW,CAAC,EAAID,KAC7B,iBAAcF,EAAU,KAAK,UAAUG,CAAY,CAAC,CACtD,CAEA,SAASC,GAAmB,CAC1BL,EAAmB,EACnB,IAAMM,EAAmC,KAAK,SAAM,gBAAaL,EAAU,MAAM,CAAC,EAClF,OAAO,OAAO,YACZ,OAAO,QAAQK,CAAG,EAAE,IAAI,CAAC,CAACC,EAAMC,CAAK,IACnCA,EAAM,gBAAkB,OAAY,CAACD,EAAM,CAAE,GAAGC,EAAO,cAAe,EAAK,CAAC,EAAI,CAACD,EAAMC,CAAK,CAC9F,CACF,CACF,CASA,SAASC,EAAkBC,EAAc,CACvCC,EAAmB,EACnB,IAAMC,EAAe,KAAK,SAAM,gBAAaC,EAAU,MAAM,CAAC,EAC9D,OAAOD,EAAaF,CAAI,KACxB,iBAAcG,EAAU,KAAK,UAAUD,CAAY,CAAC,CACtD,CAEA,SAASE,EAAmCJ,EAAc,CACxDC,EAAmB,EACnB,IAAMC,EAAe,KAAK,SAAM,gBAAaC,EAAU,MAAM,CAAC,EACxDE,EAAoBH,EAAaF,CAAI,EAAE,cAC7CE,EAAaF,CAAI,EAAE,cAAgBK,IAAsB,OAAY,GAAQ,CAACA,KAC9E,iBAAcF,EAAU,KAAK,UAAUD,CAAY,CAAC,CACtD,CAEA,IAAMI,EAA4B,IAA+B,CAC/D,GAAI,IAAC,cAAWC,CAA4B,EAAG,CAC7C,IAAMC,EAAwB,CAC5B,KAAM,GACN,KAAM,GACN,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO,EACT,EACA,0BAAcD,EAA8B,KAAK,UAAUC,CAAqB,CAAC,EAC1EA,EAGT,OADqC,KAAK,SAAM,gBAAaD,EAA8B,MAAM,CAAC,CAEpG,EAEME,EAAiCC,GAAgB,CACrD,IAAMC,EAAgC,KAAK,SAAM,gBAAaJ,EAA8B,MAAM,CAAC,EACnGI,EAAKD,CAAG,EAAI,CAACC,EAAKD,CAAG,KACrB,iBAAcH,EAA8B,KAAK,UAAUI,CAAI,CAAC,CAClE,EDxKA,IAAAC,EAA0C,wBAE3B,SAARC,GAA6B,CAClC,GAAM,CAACC,EAAQC,CAAS,KAAI,YAA8B,MAAS,EAC7D,CAACC,EAAcC,CAAe,KAAI,YAAsC,CAAC,CAAC,EAC1E,CAACC,EAAWC,CAAY,KAAI,YAAkBL,IAAW,MAAS,EAElEM,EAAgB,IAAM,CAC1BC,EAAmB,EACnB,IAAMC,EAAuBC,EAAU,EACvCR,EAAUO,CAAW,EACrB,IAAME,EAAiDC,EAAiB,EACxER,EAAgBO,CAAiB,EACjCL,EAAa,EAAK,CACpB,EAmDA,MAAO,CACL,OAAAL,EACA,aAAAE,EACA,UAAAE,EACA,cAAAE,EACA,iBAtDuB,CAACM,EAAiBC,EAAcC,EAAsB,KAAU,CAClFC,EAAwBD,CAAmB,IAChDE,EAAWJ,EAASC,CAAI,EACxBP,EAAc,EAChB,EAmDE,gBAjDuBW,GAAiB,CACxChB,EAAUD,GAAQ,OAAQkB,GAAaA,EAAE,eAAiBD,EAAM,YAAY,CAAC,EAC7EE,EAAUF,EAAM,YAAY,EAC5BX,EAAc,CAChB,EA8CE,cA5CoB,CAACc,EAA0BN,EAAsB,KAAU,CAC1EC,EAAwBD,CAAmB,IAChDE,EAAWI,EAAY,cAAeA,EAAY,KAAMA,EAAY,aAAa,EACjFd,EAAc,EAChB,EAyCE,eAvCsBW,GAAiB,CAEvC,IAAMG,EAA2B,CAC/B,KAAMH,EAAM,KACZ,cAAeA,EAAM,WACrB,cAAe,UACf,cAAe,EACjB,EACAI,EAAkBD,CAAW,EAC7Bd,EAAc,CAChB,EA8BE,eA5BqB,MAAOgB,GAAiB,CAC7C,IAAMC,EAAyB,CAC7B,MAAO,sBACP,KAAM,OAAK,MACX,QAAS,mCACT,cAAe,CAAE,MAAO,SAAU,MAAO,QAAM,YAAY,MAAO,EAClE,cAAe,CAAE,MAAO,SAAU,MAAO,QAAM,YAAY,WAAY,CACzE,EACI,QAAM,gBAAaA,CAAO,IAC5BC,EAAkBF,CAAI,EACtBhB,EAAc,EAElB,EAiBE,yBAf+B,MAAOgB,GAAiB,CACvDG,EAAmCH,CAAI,EACvChB,EAAc,CAChB,CAaA,CACF,CDzFA,IAAAoB,EAAuD,wBACvDC,EAA0B,iBIF1B,IAAAC,EAAyB,iBAIV,SAARC,GAA4C,CACjD,IAAMC,EAAuC,CAC3C,CACE,IAAK,KACL,MAAO,iBACP,QAAS,GACX,EACA,CACE,IAAK,KACL,MAAO,iBACP,QAAS,GACX,EACA,CACE,IAAK,MACL,MAAO,kBACP,QAAS,GACX,EACA,CACE,IAAK,MACL,MAAO,kBACP,QAAS,GACX,EACA,CACE,IAAK,MACL,MAAO,kBACP,QAAS,IACX,EACA,CACE,IAAK,MACL,MAAO,kBACP,QAAS,IACX,EACA,CACE,IAAK,MACL,MAAO,kBACP,QAAS,IACX,EACA,CACE,IAAK,MACL,MAAO,kBACP,QAAS,IACX,CACF,EAEM,CAACC,EAAiBC,CAAkB,KAAI,YAA8C,EACtF,CAACC,EAAmBC,CAAoB,KAAI,YAAkBH,IAAoB,MAAS,EAE3FI,EAAyB,IAAM,CACnCH,EAAmBI,EAA0B,CAAC,EAC9CF,EAAqB,EAAK,CAC5B,EAOA,MAAO,CACL,eAAAJ,EACA,gBAAAC,EACA,kBAAAE,EACA,uBAAAE,EACA,0BAViCE,GAAgB,CACjDC,EAA8BD,CAAG,EACjCF,EAAuB,CACzB,CAQA,CACF,CJjDI,IAAAI,EAAA,6BAbW,SAARC,GAA2B,CAChC,GAAM,CAAE,aAAAC,EAAc,UAAAC,EAAW,cAAAC,EAAe,yBAAAC,CAAyB,EAAIC,EAAU,EACjF,CAAE,eAAAC,EAAgB,gBAAAC,EAAiB,kBAAAC,EAAmB,uBAAAC,EAAwB,0BAAAC,CAA0B,EAC5GC,EAAyB,EACrBC,EAAY,CAAE,IAAK,CAAE,MAAO,SAAU,MAAO,QAAM,GAAI,CAAE,EACzDC,EAAa,CAAE,IAAK,CAAE,MAAO,UAAW,MAAO,QAAM,KAAM,CAAE,EAEnE,sBAAU,IAAM,CACdV,EAAc,EACdM,EAAuB,CACzB,EAAG,CAAC,CAAC,KAGH,QAAC,QAAK,UAAWP,GAAaM,EAC5B,oBAAC,OAAK,QAAL,CAAa,MAAO,iBAClB,gBAAO,KAAKP,CAAY,EACtB,KAAK,CAACa,EAAGC,IACDd,EAAaa,CAAC,EAAE,cAAgBb,EAAac,CAAC,EAAE,aACxD,EACA,IAAKC,MACJ,OAAC,OAAK,KAAL,CAEC,MAAOf,EAAae,CAAI,EAAE,KAC1B,SAAUC,EAAWhB,EAAae,CAAI,EAAE,aAAa,EACrD,KAAM,OAAK,MACX,YAAa,CAACf,EAAae,CAAI,EAAE,cAAgBH,EAAaD,CAAS,EACvE,WACE,OAAC,eACC,mBAAC,UACC,MAAOX,EAAae,CAAI,EAAE,cAAgB,mBAAqB,mBAC/D,SAAU,IAAMZ,EAAyBY,CAAI,EAC/C,EACF,GAXGA,CAaP,CACD,EACL,KACA,OAAC,OAAK,QAAL,CAAa,MAAO,kBAClB,SAAAV,EAAe,IAAKY,MACnB,OAAC,OAAK,KAAL,CAEC,MAAOA,EAAc,MACrB,KAAM,OAAK,UACX,YAAa,CAACX,IAAkBW,EAAc,GAAG,EAAIL,EAAaD,CAAS,EAC3E,WACE,OAAC,eACC,mBAAC,UACC,MAAOL,IAAkBW,EAAc,GAAG,EAAI,mBAAqB,mBACnE,SAAU,IAAMR,EAA0BQ,EAAc,GAAG,EAC7D,EACF,GAVGA,EAAc,GAYrB,CACD,EACH,GACF,CAEJ",
  "names": ["configureMenubarPresets_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "formatTime", "seconds", "hours", "mins", "secs", "secondsBetweenDates", "args", "DATAPATH", "DEFAULT_PRESET_VISIBLES_FILE", "silentFileDeletion", "fp", "err", "checkForOverlyLoudAlert", "launchedFromMenuBar", "prefs", "errorMsg", "startTimer", "timeInSeconds", "timerName", "selectedSound", "masterName", "selectedSoundPath", "cmdParts", "afplayString", "dismissFile", "error", "stderr", "formatTime", "stopTimer", "timerFile", "timerFilePath", "getTimers", "setOfTimers", "timer", "timerFileParts", "timeStarted", "secondsBetweenDates", "a", "b", "ensureCTFileExists", "DATAPATH", "createCustomTimer", "newTimer", "customTimers", "readCustomTimers", "res", "ctID", "timer", "deleteCustomTimer", "ctID", "ensureCTFileExists", "customTimers", "DATAPATH", "toggleCustomTimerMenubarVisibility", "currentVisibility", "readDefaultPresetVisibles", "DEFAULT_PRESET_VISIBLES_FILE", "defaultPresetVisibles", "toggleDefaultPresetVisibility", "key", "data", "import_api", "useTimers", "timers", "setTimers", "customTimers", "setCustomTimers", "isLoading", "setIsLoading", "refreshTimers", "ensureCTFileExists", "setOfTimers", "getTimers", "setOfCustomTimers", "readCustomTimers", "seconds", "name", "launchedFromMenuBar", "checkForOverlyLoudAlert", "startTimer", "timer", "t", "stopTimer", "customTimer", "createCustomTimer", "ctID", "options", "deleteCustomTimer", "toggleCustomTimerMenubarVisibility", "import_api", "import_react", "import_react", "useDefaultPresetVisibles", "defaultPresets", "defaultVisibles", "setDefaultVisibles", "isLoadingVisibles", "setIsLoadingVisibles", "refreshDefaultVisibles", "readDefaultPresetVisibles", "key", "toggleDefaultPresetVisibility", "import_jsx_runtime", "Command", "customTimers", "isLoading", "refreshTimers", "handleToggleCTVisibility", "useTimers", "defaultPresets", "defaultVisibles", "isLoadingVisibles", "refreshDefaultVisibles", "handleDefaultPresetToggle", "useDefaultPresetVisibles", "hiddenTag", "visibleTag", "a", "b", "ctID", "formatTime", "defaultPreset"]
}
