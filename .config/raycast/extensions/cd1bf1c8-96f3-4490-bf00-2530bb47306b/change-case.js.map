{
  "version": 3,
  "sources": ["../src/change-case.tsx", "../node_modules/change-case/src/index.ts", "../node_modules/sponge-case/src/index.ts", "../node_modules/swap-case/src/index.ts", "../node_modules/title-case/src/index.ts", "../src/types.tsx"],
  "sourcesContent": ["import {\n  Action,\n  ActionPanel,\n  Application,\n  Cache,\n  Clipboard,\n  closeMainWindow,\n  Color,\n  environment,\n  getFrontmostApplication,\n  getPreferenceValues,\n  getSelectedText,\n  Icon,\n  LaunchProps,\n  List,\n  popToRoot,\n  showHUD,\n  showToast,\n  Toast,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { CaseFunction, CaseType, functions } from \"./types.js\";\n\nclass NoTextError extends Error {\n  constructor() {\n    super(\"No text\");\n    Object.setPrototypeOf(this, NoTextError.prototype);\n  }\n}\n\nasync function getSelection() {\n  try {\n    return await getSelectedText();\n  } catch (error) {\n    return \"\";\n  }\n}\n\nasync function readContent(preferredSource: string) {\n  const clipboard = await Clipboard.readText();\n  const selected = await getSelection();\n\n  if (preferredSource === \"clipboard\") {\n    if (clipboard) return clipboard;\n    if (selected) return selected;\n  } else {\n    if (selected) return selected;\n    if (clipboard) return clipboard;\n  }\n\n  throw new NoTextError();\n}\n\nfunction modifyCasesWrapper(input: string, case_: CaseFunction) {\n  const modifiedArr: string[] = [];\n  const lines = input.split(\"\\n\");\n  for (const line of lines) {\n    modifiedArr.push(case_(line));\n  }\n  return modifiedArr.join(\"\\n\");\n}\n\nconst cache = new Cache();\n\nconst getPinnedCases = (): CaseType[] => {\n  const pinned = cache.get(\"pinned\");\n  return pinned ? JSON.parse(pinned) : [];\n};\n\nconst getRecentCases = (): CaseType[] => {\n  const recent = cache.get(\"recent\");\n  return recent ? JSON.parse(recent) : [];\n};\n\nconst setPinnedCases = (pinned: CaseType[]) => {\n  cache.set(\"pinned\", JSON.stringify(pinned));\n};\n\nconst setRecentCases = (recent: CaseType[]) => {\n  cache.set(\"recent\", JSON.stringify(recent));\n};\n\nexport default function Command(props: LaunchProps) {\n  const preferences = getPreferenceValues();\n  const preferredSource = preferences[\"source\"];\n\n  const immediatelyConvertToCase = props.launchContext?.case;\n  if (immediatelyConvertToCase) {\n    (async () => {\n      const content = await readContent(preferredSource);\n      const converted = functions[immediatelyConvertToCase](content);\n\n      Clipboard.copy(converted);\n\n      showHUD(`Converted to ${immediatelyConvertToCase}`);\n      popToRoot();\n    })();\n    return;\n  }\n\n  const [content, setContent] = useState<string>(\"\");\n  const [frontmostApp, setFrontmostApp] = useState<Application>();\n\n  const [pinned, setPinned] = useState<CaseType[]>([]);\n  const [recent, setRecent] = useState<CaseType[]>([]);\n\n  useEffect(() => {\n    setPinned(getPinnedCases());\n    setRecent(getRecentCases());\n    getFrontmostApplication().then(setFrontmostApp);\n  }, []);\n\n  useEffect(() => {\n    setPinnedCases(pinned);\n  }, [pinned]);\n\n  useEffect(() => {\n    setRecentCases(recent);\n  }, [recent]);\n\n  const refreshContent = async () => {\n    try {\n      setContent(await readContent(preferredSource));\n    } catch (error) {\n      if (error instanceof NoTextError) {\n        showToast({\n          style: Toast.Style.Failure,\n          title: \"Nothing to convert\",\n          message: \"Please ensure that text is either selected or copied\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    refreshContent();\n  }, []);\n\n  const CopyToClipboard = (props: {\n    case: CaseType;\n    modified: string;\n    pinned?: boolean;\n    recent?: boolean;\n  }): JSX.Element => {\n    return (\n      <Action\n        title=\"Copy to Clipboard\"\n        icon={Icon.Clipboard}\n        onAction={() => {\n          if (!props.pinned) {\n            setRecent([props.case, ...recent.filter((c) => c !== props.case)].slice(0, 4));\n          }\n          showHUD(\"Copied to Clipboard\");\n          Clipboard.copy(props.modified);\n          closeMainWindow();\n        }}\n      />\n    );\n  };\n\n  const PasteToActiveApp = (props: {\n    case: CaseType;\n    modified: string;\n    pinned?: boolean;\n    recent?: boolean;\n  }): JSX.Element | null => {\n    return frontmostApp ? (\n      <Action\n        title={`Paste in ${frontmostApp.name}`}\n        icon={{ fileIcon: frontmostApp.path }}\n        onAction={() => {\n          if (!props.pinned) {\n            setRecent([props.case, ...recent.filter((c) => c !== props.case)].slice(0, 4));\n          }\n          showHUD(`Pasted in ${frontmostApp.name}`);\n          Clipboard.paste(props.modified);\n          closeMainWindow();\n        }}\n      />\n    ) : null;\n  };\n\n  const CaseItem = (props: { case: CaseType; modified: string; pinned?: boolean; recent?: boolean }): JSX.Element => {\n    const context = encodeURIComponent(`{\"case\":\"${props.case}\"}`);\n    const deeplink = `raycast://extensions/erics118/${environment.extensionName}/${environment.commandName}?context=${context}`;\n\n    return (\n      <List.Item\n        id={props.case}\n        title={props.case}\n        accessories={[{ text: props.modified }]}\n        detail={<List.Item.Detail markdown={props.modified} />}\n        actions={\n          <ActionPanel>\n            <ActionPanel.Section>\n              {preferences[\"action\"] === \"paste\" && <PasteToActiveApp {...props} />}\n              <CopyToClipboard {...props} />\n              {preferences[\"action\"] === \"copy\" && <PasteToActiveApp {...props} />}\n            </ActionPanel.Section>\n            <ActionPanel.Section>\n              {!props.pinned ? (\n                <Action\n                  title=\"Pin Case\"\n                  icon={Icon.Pin}\n                  shortcut={{ key: \"p\", modifiers: [\"cmd\", \"shift\"] }}\n                  onAction={() => {\n                    setPinned([props.case, ...pinned]);\n                    if (props.recent) {\n                      setRecent(recent.filter((c) => c !== props.case));\n                    }\n                  }}\n                />\n              ) : (\n                <>\n                  <Action\n                    title=\"Remove Pinned Case\"\n                    icon={Icon.PinDisabled}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                    onAction={() => {\n                      setPinned(pinned.filter((c) => c !== props.case));\n                    }}\n                  />\n                  <Action\n                    title=\"Clear Pinned Cases\"\n                    icon={{ source: Icon.XMarkCircle, tintColor: Color.Red }}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\", \"shift\"] }}\n                    onAction={() => {\n                      setPinned([]);\n                    }}\n                  />\n                </>\n              )}\n              {props.recent && (\n                <>\n                  <Action\n                    title=\"Remove Recent Case\"\n                    icon={Icon.XMarkCircle}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                    onAction={() => {\n                      setRecent(recent.filter((c) => c !== props.case));\n                    }}\n                  />\n                  <Action\n                    title=\"Clear Recent Cases\"\n                    icon={{ source: Icon.XMarkCircle, tintColor: Color.Red }}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\", \"shift\"] }}\n                    onAction={() => {\n                      setRecent([]);\n                    }}\n                  />\n                </>\n              )}\n              <Action.CreateQuicklink\n                title={`Create Quicklink to Convert to ${props.case}`}\n                quicklink={{ name: `Convert to ${props.case}`, link: deeplink }}\n              />\n            </ActionPanel.Section>\n            <ActionPanel.Section>\n              <Action\n                title=\"Refresh Content\"\n                icon={Icon.RotateAntiClockwise}\n                shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                onAction={refreshContent}\n              />\n            </ActionPanel.Section>\n          </ActionPanel>\n        }\n      />\n    );\n  };\n\n  return (\n    <List isShowingDetail={true}>\n      <List.Section title=\"Pinned\">\n        {pinned?.map((key) => (\n          <CaseItem\n            key={key}\n            case={key as CaseType}\n            modified={modifyCasesWrapper(content, functions[key])}\n            pinned={true}\n          />\n        ))}\n      </List.Section>\n      <List.Section title=\"Recent\">\n        {recent.map((key) => (\n          <CaseItem\n            key={key}\n            case={key as CaseType}\n            modified={modifyCasesWrapper(content, functions[key])}\n            recent={true}\n          />\n        ))}\n      </List.Section>\n      <List.Section title=\"All Cases\">\n        {Object.entries(functions)\n          .filter(\n            ([key]) =>\n              preferences[key.replace(/ +/g, \"\")] &&\n              !recent.includes(key as CaseType) &&\n              !pinned.includes(key as CaseType),\n          )\n          .map(([key, func]) => (\n            <CaseItem key={key} case={key as CaseType} modified={modifyCasesWrapper(content, func)} />\n          ))}\n      </List.Section>\n    </List>\n  );\n}\n", "// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu;\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu;\nconst SPLIT_NUMBER_LOWER_RE = /(\\d)(\\p{Ll})/gu;\nconst SPLIT_LETTER_NUMBER_RE = /(\\p{L})(\\d)/gu;\n\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu;\n\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\0$2\";\n\n// The default characters to keep after transforming case.\nconst DEFAULT_PREFIX_CHARACTERS = \"\";\n\n/**\n * Supported locale values. Use `false` to ignore locale.\n * Defaults to `undefined`, which uses the host environment.\n */\nexport type Locale = string[] | string | false | undefined;\n\n/**\n * Options used for converting strings to pascal/camel case.\n */\nexport interface PascalCaseOptions extends Options {\n  mergeAmbiguousCharacters?: boolean;\n}\n\n/**\n * Options used for converting strings to any case.\n */\nexport interface Options extends SplitOptions {\n  locale?: Locale;\n  delimiter?: string;\n  prefixCharacters?: string;\n}\n\n/**\n * Options used for splitting strings into word segments.\n */\nexport interface SplitOptions {\n  separateNumbers?: boolean;\n}\n\n/**\n * Split any cased input strings into an array of words.\n */\nexport function split(input: string, options?: SplitOptions) {\n  let result = input.trim();\n\n  result = result\n    .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)\n    .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);\n\n  if (options?.separateNumbers) {\n    result = result\n      .replace(SPLIT_NUMBER_LOWER_RE, SPLIT_REPLACE_VALUE)\n      .replace(SPLIT_LETTER_NUMBER_RE, SPLIT_REPLACE_VALUE);\n  }\n\n  result = result.replace(DEFAULT_STRIP_REGEXP, \"\\0\");\n\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  if (start === end) return [];\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  return result.slice(start, end).split(/\\0/g);\n}\n\n/**\n * Convert a string to space separated lower case (`foo bar`).\n */\nexport function noCase(input: string, options?: Options) {\n  const prefix = getPrefix(input, options?.prefixCharacters);\n  return (\n    prefix +\n    split(input, options)\n      .map(lowerFactory(options?.locale))\n      .join(options?.delimiter ?? \" \")\n  );\n}\n\n/**\n * Convert a string to camel case (`fooBar`).\n */\nexport function camelCase(input: string, options?: PascalCaseOptions) {\n  const prefix = getPrefix(input, options?.prefixCharacters);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  const transform = options?.mergeAmbiguousCharacters\n    ? capitalCaseTransformFactory(lower, upper)\n    : pascalCaseTransformFactory(lower, upper);\n  return (\n    prefix +\n    split(input, options)\n      .map((word, index) => {\n        if (index === 0) return lower(word);\n        return transform(word, index);\n      })\n      .join(options?.delimiter ?? \"\")\n  );\n}\n\n/**\n * Convert a string to pascal case (`FooBar`).\n */\nexport function pascalCase(input: string, options?: PascalCaseOptions) {\n  const prefix = getPrefix(input, options?.prefixCharacters);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  const transform = options?.mergeAmbiguousCharacters\n    ? capitalCaseTransformFactory(lower, upper)\n    : pascalCaseTransformFactory(lower, upper);\n  return (\n    prefix +\n    split(input, options)\n      .map(transform)\n      .join(options?.delimiter ?? \"\")\n  );\n}\n\n/**\n * Convert a string to pascal snake case (`Foo_Bar`).\n */\nexport function pascalSnakeCase(input: string, options?: Options) {\n  return capitalCase(input, { delimiter: \"_\", ...options });\n}\n\n/**\n * Convert a string to capital case (`Foo Bar`).\n */\nexport function capitalCase(input: string, options?: Options) {\n  const prefix = getPrefix(input, options?.prefixCharacters);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  return (\n    prefix +\n    split(input, options)\n      .map(capitalCaseTransformFactory(lower, upper))\n      .join(options?.delimiter ?? \" \")\n  );\n}\n\n/**\n * Convert a string to constant case (`FOO_BAR`).\n */\nexport function constantCase(input: string, options?: Options) {\n  const prefix = getPrefix(input, options?.prefixCharacters);\n  return (\n    prefix +\n    split(input, options)\n      .map(upperFactory(options?.locale))\n      .join(options?.delimiter ?? \"_\")\n  );\n}\n\n/**\n * Convert a string to dot case (`foo.bar`).\n */\nexport function dotCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \".\", ...options });\n}\n\n/**\n * Convert a string to kebab case (`foo-bar`).\n */\nexport function kebabCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \"-\", ...options });\n}\n\n/**\n * Convert a string to path case (`foo/bar`).\n */\nexport function pathCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \"/\", ...options });\n}\n\n/**\n * Convert a string to path case (`Foo bar`).\n */\nexport function sentenceCase(input: string, options?: Options) {\n  const prefix = getPrefix(input, options?.prefixCharacters);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  const transform = capitalCaseTransformFactory(lower, upper);\n  return (\n    prefix +\n    split(input, options)\n      .map((word, index) => {\n        if (index === 0) return transform(word);\n        return lower(word);\n      })\n      .join(options?.delimiter ?? \" \")\n  );\n}\n\n/**\n * Convert a string to snake case (`foo_bar`).\n */\nexport function snakeCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \"_\", ...options });\n}\n\n/**\n * Convert a string to header case (`Foo-Bar`).\n */\nexport function trainCase(input: string, options?: Options) {\n  return capitalCase(input, { delimiter: \"-\", ...options });\n}\n\nfunction lowerFactory(locale: Locale): (input: string) => string {\n  return locale === false\n    ? (input: string) => input.toLowerCase()\n    : (input: string) => input.toLocaleLowerCase(locale);\n}\n\nfunction upperFactory(locale: Locale): (input: string) => string {\n  return locale === false\n    ? (input: string) => input.toUpperCase()\n    : (input: string) => input.toLocaleUpperCase(locale);\n}\n\nfunction capitalCaseTransformFactory(\n  lower: (input: string) => string,\n  upper: (input: string) => string,\n) {\n  return (word: string) => `${upper(word[0])}${lower(word.slice(1))}`;\n}\n\nfunction pascalCaseTransformFactory(\n  lower: (input: string) => string,\n  upper: (input: string) => string,\n) {\n  return (word: string, index: number) => {\n    const char0 = word[0];\n    const initial =\n      index > 0 && char0 >= \"0\" && char0 <= \"9\" ? \"_\" + char0 : upper(char0);\n    return initial + lower(word.slice(1));\n  };\n}\n\nfunction getPrefix(\n  input: string,\n  prefixCharacters = DEFAULT_PREFIX_CHARACTERS,\n): string {\n  let prefix = \"\";\n  for (let i = 0; i < input.length; i++) {\n    const char = input.charAt(i);\n    if (prefixCharacters.includes(char)) {\n      prefix += char;\n    } else {\n      break;\n    }\n  }\n  return prefix;\n}\n", "export function spongeCase(input: string, locale?: string[] | string): string {\n  let result = \"\";\n  for (const char of input) {\n    result +=\n      Math.random() > 0.5\n        ? char.toLocaleUpperCase(locale)\n        : char.toLocaleLowerCase(locale);\n  }\n  return result;\n}\n", "export function swapCase(input: string, locale?: string[] | string) {\n  let result = \"\";\n  for (const char of input) {\n    const lower = char.toLocaleLowerCase(locale);\n    result += char === lower ? char.toLocaleUpperCase(locale) : lower;\n  }\n  return result;\n}\n", "const TOKENS = /\\S+|./g;\nconst IS_MANUAL_CASE = /\\p{Ll}(?=[\\p{Lu}])|\\.\\p{L}/u; // iPhone, example.com, U.N., etc.\nconst ALPHANUMERIC_PATTERN = /[\\p{L}\\d]+/gu;\n\nconst WORD_SEPARATORS = new Set([\"—\", \"–\", \"-\", \"―\", \"/\"]);\n\nconst SMALL_WORDS = new Set([\n  \"a\",\n  \"an\",\n  \"and\",\n  \"as\",\n  \"at\",\n  \"because\",\n  \"but\",\n  \"by\",\n  \"en\",\n  \"for\",\n  \"if\",\n  \"in\",\n  \"neither\",\n  \"nor\",\n  \"of\",\n  \"on\",\n  \"only\",\n  \"or\",\n  \"over\",\n  \"per\",\n  \"so\",\n  \"some\",\n  \"than\",\n  \"that\",\n  \"the\",\n  \"to\",\n  \"up\",\n  \"upon\",\n  \"v\",\n  \"versus\",\n  \"via\",\n  \"vs\",\n  \"when\",\n  \"with\",\n  \"without\",\n  \"yet\",\n]);\n\nexport interface Options {\n  smallWords?: Set<string>;\n  locale?: string | string[];\n}\n\nexport function titleCase(\n  input: string,\n  options: Options | string[] | string = {},\n) {\n  let result = \"\";\n  let m: RegExpExecArray | null;\n\n  const { smallWords = SMALL_WORDS, locale } =\n    typeof options === \"string\" || Array.isArray(options)\n      ? { locale: options }\n      : options;\n\n  // tslint:disable-next-line\n  while ((m = TOKENS.exec(input)) !== null) {\n    const { 0: token, index } = m;\n\n    // Ignore already capitalized words.\n    if (IS_MANUAL_CASE.test(token)) {\n      result += token;\n    } else {\n      result += token.replace(ALPHANUMERIC_PATTERN, (m, i) => {\n        // Ignore small words except at beginning or end.\n        if (\n          index > 0 &&\n          index + token.length < input.length &&\n          smallWords.has(m)\n        ) {\n          return m;\n        }\n\n        // Only capitalize words after a valid word separator.\n        if (i > 1 && !WORD_SEPARATORS.has(input.charAt(index + i - 1))) {\n          return m;\n        }\n\n        return m.charAt(0).toLocaleUpperCase(locale) + m.slice(1);\n      });\n    }\n  }\n\n  return result;\n}\n", "import * as changeCase from \"change-case\";\nimport { spongeCase } from \"sponge-case\";\nimport { swapCase } from \"swap-case\";\nimport { titleCase } from \"title-case\";\n\nexport type CaseFunction = (input: string) => string;\nexport type CaseFunctions = Record<string, CaseFunction>;\n\nconst lowerCase = (input: string) => input.toLowerCase();\n\nconst lowerFirst = (input: string) => {\n  if (input.length <= 1) {\n    return input.toLowerCase();\n  }\n  return input[0].toLowerCase() + input.slice(1);\n};\n\nconst upperCase = (input: string) => input.toUpperCase();\n\nconst upperFirst = (input: string) => {\n  if (input.length <= 1) {\n    return input.toUpperCase();\n  }\n  return input[0].toUpperCase() + input.slice(1);\n};\n\nexport const functions: CaseFunctions = {\n  \"Camel Case\": changeCase.camelCase,\n  \"Capital Case\": changeCase.capitalCase,\n  \"Constant Case\": changeCase.constantCase,\n  \"Dot Case\": changeCase.dotCase,\n  \"Header Case\": changeCase.trainCase, // see Train Case\n  \"Kebab Case\": changeCase.kebabCase,\n  \"Lower Case\": lowerCase,\n  \"Lower First\": lowerFirst,\n  \"Macro Case\": changeCase.constantCase, // see Constant Case\n  \"No Case\": changeCase.noCase,\n  \"Param Case\": changeCase.kebabCase, // see Kebab Case\n  \"Pascal Case\": changeCase.pascalCase,\n  \"Pascal Snake Case\": changeCase.pascalSnakeCase,\n  \"Path Case\": changeCase.pathCase,\n  \"Random Case\": spongeCase,\n  \"Sentence Case\": changeCase.sentenceCase,\n  \"Snake Case\": changeCase.snakeCase,\n  \"Swap Case\": swapCase,\n  \"Title Case\": titleCase,\n  \"Upper Case\": upperCase,\n  \"Upper First\": upperFirst,\n  \"Sponge Case\": spongeCase, // see Random Case\n  \"Train Case\": changeCase.trainCase,\n};\n\nexport const cases = Object.keys(functions);\nexport type CaseType = (typeof cases)[number];\n"],
  "mappings": "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",
  "names": ["change_case_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "SPLIT_LOWER_UPPER_RE", "SPLIT_UPPER_UPPER_RE", "SPLIT_NUMBER_LOWER_RE", "SPLIT_LETTER_NUMBER_RE", "DEFAULT_STRIP_REGEXP", "SPLIT_REPLACE_VALUE", "DEFAULT_PREFIX_CHARACTERS", "split", "input", "options", "result", "start", "end", "noCase", "getPrefix", "lowerFactory", "camelCase", "prefix", "lower", "upper", "upperFactory", "transform", "capitalCaseTransformFactory", "pascalCaseTransformFactory", "word", "index", "pascalCase", "pascalSnakeCase", "capitalCase", "constantCase", "dotCase", "kebabCase", "pathCase", "sentenceCase", "snakeCase", "trainCase", "locale", "char0", "prefixCharacters", "i", "char", "spongeCase", "input", "locale", "result", "char", "swapCase", "input", "locale", "result", "char", "lower", "TOKENS", "IS_MANUAL_CASE", "ALPHANUMERIC_PATTERN", "WORD_SEPARATORS", "SMALL_WORDS", "titleCase", "input", "options", "result", "m", "smallWords", "locale", "token", "index", "i", "lowerCase", "input", "lowerFirst", "upperCase", "upperFirst", "functions", "camelCase", "capitalCase", "constantCase", "dotCase", "trainCase", "kebabCase", "noCase", "pascalCase", "pascalSnakeCase", "pathCase", "spongeCase", "sentenceCase", "snakeCase", "swapCase", "titleCase", "cases", "import_jsx_runtime", "NoTextError", "getSelection", "readContent", "preferredSource", "clipboard", "selected", "modifyCasesWrapper", "input", "case_", "modifiedArr", "lines", "line", "cache", "getPinnedCases", "pinned", "getRecentCases", "recent", "setPinnedCases", "setRecentCases", "Command", "props", "preferences", "immediatelyConvertToCase", "content", "converted", "functions", "setContent", "frontmostApp", "setFrontmostApp", "setPinned", "setRecent", "refreshContent", "error", "CopyToClipboard", "c", "PasteToActiveApp", "CaseItem", "context", "deeplink", "key", "func"]
}
