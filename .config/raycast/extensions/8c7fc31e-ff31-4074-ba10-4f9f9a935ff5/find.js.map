{
  "version": 3,
  "sources": ["../src/find.tsx", "../src/utils/input.ts", "../src/utils/url.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Icon, popToRoot, getPreferenceValues } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { fetchItemInput } from \"./utils/input\";\nimport { makeSearchURL } from \"./utils/url\";\nimport { Preferences } from \"./utils/types\";\n\nexport default function Command() {\n  const preferences = getPreferenceValues<Preferences>();\n  const [query, setQuery] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(preferences.useSelected);\n\n  // Get highlighted or copied text if preferred.\n  useEffect(() => {\n    async function _fetchItemInput() {\n      const inputItem = await fetchItemInput();\n      setQuery(inputItem);\n      setIsLoading(false);\n    }\n    if (preferences.useSelected) {\n      _fetchItemInput().then();\n    }\n  }, []);\n\n  return (\n    <Form\n      isLoading={isLoading}\n      actions={\n        <ActionPanel>\n          <Action.OpenInBrowser url={makeSearchURL(query)} icon={Icon.Globe} onOpen={() => popToRoot()} />\n          <Action.CopyToClipboard content={makeSearchURL(query)} icon={Icon.Clipboard} onCopy={() => popToRoot()} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"search\" title=\"Search\" placeholder=\"Location or Category\" value={query} onChange={setQuery} />\n    </Form>\n  );\n}\n", "import { Clipboard, getSelectedText } from \"@raycast/api\";\n\n/**\n * Gets selected text. If no text selected, gets clipboard text.\n *\n * @returns selected text, or otherwise clipboard text\n */\nexport const fetchItemInput = async () => {\n  return getSelectedText()\n    .then(async (text) => (!isEmpty(text) ? text : await getClipboardText()))\n    .catch(async () => await getClipboardText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nexport const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n\nconst getClipboardText = async () => {\n  const content = await Clipboard.readText();\n  return typeof content == \"undefined\" ? \"\" : content;\n};\n", "/**\n * Given an origin, a destination, and a travel mode, returns a direction url according to the following specs:\n * https://developers.google.com/maps/documentation/urls/get-started\n *\n * @param origin The origin address\n * @param destination The destination address\n * @param travelmode One of four possible travel modes\n * @returns A properly URI encoded string according to Google Maps documentation\n */\nexport function makeDirectionsURL(origin: string, destination: string, travelmode: string): string {\n  const mapsBase = \"https://www.google.com/maps/dir/?api=1\";\n  return (\n    mapsBase +\n    \"&origin=\" +\n    encodeURI(origin) +\n    \"&destination=\" +\n    encodeURI(destination) +\n    \"&travelmode=\" +\n    encodeURI(travelmode)\n  );\n}\n\n/**\n * Given a query string, returns search url according to the following specs:\n * https://developers.google.com/maps/documentation/urls/get-started\n *\n * @param query The query address\n * @returns A properly URI encoded string according to Google Maps documentation\n */\nexport function makeSearchURL(query: string): string {\n  const mapsBase = \"https://www.google.com/maps/search/?api=1\";\n  return mapsBase + \"&query=\" + encodeURI(query);\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAgF,wBAChFC,EAAoC,iBCDpC,IAAAC,EAA2C,wBAO9BC,EAAiB,YACrB,mBAAgB,EACpB,KAAK,MAAOC,GAAWC,EAAQD,CAAI,EAAW,MAAME,EAAiB,EAA9BF,CAAgC,EACvE,MAAM,SAAY,MAAME,EAAiB,CAAC,EAC1C,KAAMC,GAAWF,EAAQE,CAAI,EAAW,GAAPA,CAAU,EAC3C,MAAM,IAAM,EAAY,EAGhBF,EAAWG,GACf,EAAEA,GAAU,MAAQ,OAAOA,CAAM,EAAE,OAAS,GAG/CF,EAAmB,SAAY,CACnC,IAAMG,EAAU,MAAM,YAAU,SAAS,EACzC,OAAO,OAAOA,EAAW,IAAc,GAAKA,CAC9C,ECOO,SAASC,EAAcC,EAAuB,CAEnD,MADiB,4CACC,UAAY,UAAUA,CAAK,CAC/C,CFhCA,IAAAC,EAAA,6BAMe,SAARC,GAA2B,CAChC,IAAMC,KAAc,uBAAiC,EAC/C,CAACC,EAAOC,CAAQ,KAAI,YAAiB,EAAE,EACvC,CAACC,EAAWC,CAAY,KAAI,YAAkBJ,EAAY,WAAW,EAG3E,sBAAU,IAAM,CACd,eAAeK,GAAkB,CAC/B,IAAMC,EAAY,MAAMC,EAAe,EACvCL,EAASI,CAAS,EAClBF,EAAa,EAAK,CACpB,CACIJ,EAAY,aACdK,EAAgB,EAAE,KAAK,CAE3B,EAAG,CAAC,CAAC,KAGH,OAAC,QACC,UAAWF,EACX,WACE,QAAC,eACC,oBAAC,SAAO,cAAP,CAAqB,IAAKK,EAAcP,CAAK,EAAG,KAAM,OAAK,MAAO,OAAQ,OAAM,aAAU,EAAG,KAC9F,OAAC,SAAO,gBAAP,CAAuB,QAASO,EAAcP,CAAK,EAAG,KAAM,OAAK,UAAW,OAAQ,OAAM,aAAU,EAAG,GAC1G,EAGF,mBAAC,OAAK,UAAL,CAAe,GAAG,SAAS,MAAM,SAAS,YAAY,uBAAuB,MAAOA,EAAO,SAAUC,EAAU,EAClH,CAEJ",
  "names": ["find_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "fetchItemInput", "text", "isEmpty", "getClipboardText", "item", "string", "content", "makeSearchURL", "query", "import_jsx_runtime", "Command", "preferences", "query", "setQuery", "isLoading", "setIsLoading", "_fetchItemInput", "inputItem", "fetchItemInput", "makeSearchURL"]
}
