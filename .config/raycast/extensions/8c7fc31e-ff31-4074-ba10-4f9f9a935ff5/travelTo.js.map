{
  "version": 3,
  "sources": ["../src/travelTo.tsx", "../src/utils/input.ts", "../src/utils/url.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, getPreferenceValues, Icon, popToRoot } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { fetchItemInput } from \"./utils/input\";\nimport { Preferences, TravelMode } from \"./utils/types\";\nimport { makeDirectionsURL } from \"./utils/url\";\n\n/* The form's origin options. */\nenum OrginOption {\n  CurLoc = \"curloc\",\n  Home = \"home\",\n  Custom = \"custom\",\n}\n\nexport default function Command() {\n  const preferences = getPreferenceValues<Preferences>();\n\n  // Used to handle what the Form displays.\n  const [origin, setOrigin] = useState<OrginOption>(OrginOption.CurLoc);\n  // Used to handle what is submitted to the Google Maps API.\n  const [originAddress, setOriginAddress] = useState<string>(\"\");\n  const [destination, setDestination] = useState<string>(\"\");\n  const [mode, setMode] = useState<string>(preferences.preferredMode);\n  const [isLoading, setIsLoading] = useState<boolean>(preferences.useSelected);\n\n  // Get highlighted or copied text if preferred.\n  useEffect(() => {\n    async function _fetchItemInput() {\n      const inputItem = await fetchItemInput();\n      setDestination(inputItem);\n      setIsLoading(false);\n    }\n\n    if (preferences.useSelected) {\n      _fetchItemInput().then();\n    }\n  }, []);\n\n  const handleOriginChange = (value: string) => {\n    if (value === OrginOption.CurLoc) {\n      setOriginAddress(\"\");\n      setOrigin(OrginOption.CurLoc);\n    } else if (value === OrginOption.Home) {\n      setOriginAddress(preferences.homeAddress);\n      setOrigin(OrginOption.Home);\n    } else {\n      setOriginAddress(\"\");\n      setOrigin(OrginOption.Custom);\n    }\n  };\n\n  return (\n    <Form\n      isLoading={isLoading}\n      actions={\n        <ActionPanel>\n          <Action.OpenInBrowser\n            url={makeDirectionsURL(originAddress, destination, mode)}\n            icon={Icon.Globe}\n            onOpen={() => popToRoot()}\n          />\n          <Action.CopyToClipboard\n            content={makeDirectionsURL(originAddress, destination, mode)}\n            icon={Icon.Clipboard}\n            onCopy={() => popToRoot()}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"destination\"\n        title=\"Destination\"\n        placeholder=\"Name or Address\"\n        value={destination}\n        onChange={setDestination}\n      />\n      <Form.Separator />\n      <Form.Dropdown id=\"origin\" title=\"Origin\" value={origin} onChange={handleOriginChange}>\n        <Form.Dropdown.Item value={OrginOption.CurLoc} title=\"Current Location\" icon=\"\uD83D\uDCCD\" />\n        <Form.Dropdown.Item value={OrginOption.Home} title=\"Home\" icon=\"\uD83C\uDFE0\" />\n        <Form.Dropdown.Item value={OrginOption.Custom} title=\"Custom Address\" icon=\"\u270F\uFE0F\" />\n      </Form.Dropdown>\n      {origin === OrginOption.Custom && (\n        <Form.TextField\n          id=\"originAddress\"\n          title=\"Origin Address\"\n          placeholder=\"Name or Address\"\n          value={originAddress}\n          onChange={setOriginAddress}\n        />\n      )}\n      <Form.Dropdown id=\"travelmode\" title=\"Travel Mode\" value={mode} onChange={setMode}>\n        <Form.Dropdown.Item value={TravelMode.Driving} title=\"Car\" icon=\"\uD83D\uDE97\" />\n        <Form.Dropdown.Item value={TravelMode.Transit} title=\"Public Transport\" icon=\"\uD83D\uDE86\" />\n        <Form.Dropdown.Item value={TravelMode.Walking} title=\"Walk\" icon=\"\uD83D\uDEB6\u200D\u2640\uFE0F\" />\n        <Form.Dropdown.Item value={TravelMode.Bicycling} title=\"Bike\" icon=\"\uD83D\uDEB2\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n", "import { Clipboard, getSelectedText } from \"@raycast/api\";\n\n/**\n * Gets selected text. If no text selected, gets clipboard text.\n *\n * @returns selected text, or otherwise clipboard text\n */\nexport const fetchItemInput = async () => {\n  return getSelectedText()\n    .then(async (text) => (!isEmpty(text) ? text : await getClipboardText()))\n    .catch(async () => await getClipboardText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nexport const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n\nconst getClipboardText = async () => {\n  const content = await Clipboard.readText();\n  return typeof content == \"undefined\" ? \"\" : content;\n};\n", "/**\n * Given an origin, a destination, and a travel mode, returns a direction url according to the following specs:\n * https://developers.google.com/maps/documentation/urls/get-started\n *\n * @param origin The origin address\n * @param destination The destination address\n * @param travelmode One of four possible travel modes\n * @returns A properly URI encoded string according to Google Maps documentation\n */\nexport function makeDirectionsURL(origin: string, destination: string, travelmode: string): string {\n  const mapsBase = \"https://www.google.com/maps/dir/?api=1\";\n  return (\n    mapsBase +\n    \"&origin=\" +\n    encodeURI(origin) +\n    \"&destination=\" +\n    encodeURI(destination) +\n    \"&travelmode=\" +\n    encodeURI(travelmode)\n  );\n}\n\n/**\n * Given a query string, returns search url according to the following specs:\n * https://developers.google.com/maps/documentation/urls/get-started\n *\n * @param query The query address\n * @returns A properly URI encoded string according to Google Maps documentation\n */\nexport function makeSearchURL(query: string): string {\n  const mapsBase = \"https://www.google.com/maps/search/?api=1\";\n  return mapsBase + \"&query=\" + encodeURI(query);\n}\n"],
  "mappings": "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",
  "names": ["travelTo_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "fetchItemInput", "text", "isEmpty", "getClipboardText", "item", "string", "content", "makeDirectionsURL", "origin", "destination", "travelmode", "import_jsx_runtime", "Command", "preferences", "origin", "setOrigin", "originAddress", "setOriginAddress", "destination", "setDestination", "mode", "setMode", "isLoading", "setIsLoading", "_fetchItemInput", "inputItem", "fetchItemInput", "handleOriginChange", "value", "makeDirectionsURL"]
}
